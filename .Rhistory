mvw_inflation(index = "paashe", data = mydat)
mvw_inflation(index = "paashe", data = mydat)
mvw_inflation(index = "fisher", data = mydat)
mvw_inflation(index = "paashe", data = mydat)
mvw_inflation(index = "fisher", data = mydat)
load_all()
mvw_inflation(index = "paashe", data = mydat)
mvw_inflation(index = "fisher", data = mydat)
document()
help("mvw_inflation")
document()
load_all
load_all()
help("mvw_inflation")
document()
load_all()
help("mvw_inflation")
document()
build()
install.packages
?install.packages
install.packages(type='source', repos = NULL, file.choose())
library(mvWeightedCPI)
detach("package:mvWeightedCPI", unload = TRUE)
unload("mvWeightedCPI")
library(mvWeightedCPI)
help("mvw_inflation")
document()
install()
remove.packages('mvWeihtedCPI')
remove.packages('mvWeightedCPI')
library(mvWeightedCPI)
help(mvw_cpi)
?mvw_inflation()
document()
remove.packages("mvWeightedCPI")
library(mvWeightedCPI)
citation("mvWeightedCPI")
document
document()
remove.packages("mvWeightedCPI")
document
document()
library(mvWeightedCPI)
citation("mvWeightedCPI")
runif(50, 12, 15)
library(mvWeightedCPI)
#create an arbitrary price data
myData <- data.frame(x1=runif(50, 9.9, 13.7),
x2=rnorm(50, 10.9, 2.1),
x3=runif(50, 12.2, 15),
x4=runif(50,19.4, 24),
y1=runif(50, 26, 30),
y2=runif(50, 31, 38.9),
y3=runif(28.2, 33.1),
y4=runif(51.8, 60)
)
library(mvWeightedCPI)
#create an arbitrary price data
myData <- data.frame(x1=runif(50, 9.9, 13.7),
x2=rnorm(50, 10.9, 2.1),
x3=runif(50, 12.2, 15),
x4=runif(50,19.4, 24),
y1=runif(50, 26, 30),
y2=runif(50, 31, 38.9),
y3=runif(28.2, 33.1),
y4=runif(51.8, 60)
)
library(mvWeightedCPI)
#create an arbitrary price data
myData <- data.frame(x1=runif(50, 9.9, 13.7),
x2=rnorm(50, 10.9, 2.1),
x3=runif(50, 12.2, 15),
x4=runif(50,19.4, 24),
y1=runif(50, 26, 30),
y2=runif(50, 31, 38.9),
y3=runif(50, 28.2, 33.1),
y4=runif(50, 51.8, 60)
)
#call the function with the created data
mvw_cpi(data = myData)
# view empirical_Data1 provided in package
empirical_Data1
#calculating inflation using Fishers index
mvw_inflation(index = 'fisher', data = myData)
#calculating inflation using Fishers index
mvw_inflation(index = 'fisher', data = myData)
# Fishers' is the ideal index for calculating inflation.
# The rest of the indices generates a warning after calculating inflation
mvw_inflation(index = 'drobish', data = myData)
mvw_inflation(index = 'drobish', data = myData)
#calculating inflation using Fishers index
mvw_inflation(index = 'fisher', data = myData)
# view empirical_Data1 provided in package
empirical_Data1
# calculate indices using empirical_Data1
mvw_cpi(data = empirical_Data1)
library(devtools)
build_readme()
library(devtools)
load_all
load_all()
# view empirical_Data1 provided in package
head(empirical_Data1)
# calculate indices and inflation using empirical_Data1
mvw_cpi(data = empirical_Data1)
mvw_inflation(index='fisher', data = empirical_Data1)
glimpse(empirical_Data1)
View(empirical_Data1)
str(empirical_Data1)
glimpse(empirical_Data1)
library(dplyr)
glimpse(empirical_Data1)
dim(empirical_Data1)
# inspect empirical_Data2 provided in package
head(empirical_Data2)
dim(empirical_Data2)
# calculate indices and inflation using empirical_Data2
mvw_cpi(data = empirical_Data2)
mvw_inflation(index='fisher', data = empirical_Data2)
build_readme()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='gkagyen', token='A634D80DC56DB773604D2357138C45DA', secret='2Cox8626hEyjntceFKtpfW1WlJJ3QThMqPC79k60')
library(shiny); runApp('E:/Shiny/Shiny/myapp.R')
library(rsconnect)
deployApp('mapp.R')
deployApp('myapp.R')
setwd("E:/Shiny/Shiny")
deployApp('myapp.R')
runApp()
runApp('Summarytables')
load_all()
library(devtools)
load_all()
new.price.data <- tibble(b1 = runif(100, 78, 90),
b2 = runif(100, 67, 99),
b3 = runif(100, 29.5, 37),
b4 = runif(100, 170, 211.6),
b5 = runif(10, 43.6, 66.1),
c1 = runif(100, 355, 389.5),
c2 = runif(100, 244, 255.3),
c3 = b3*3,
c4 = b4*3.5,
c5 = b5*4.9)
library(dplyr)
new.price.data <- tibble(b1 = runif(100, 78, 90),
b2 = runif(100, 67, 99),
b3 = runif(100, 29.5, 37),
b4 = runif(100, 170, 211.6),
b5 = runif(10, 43.6, 66.1),
c1 = runif(100, 355, 389.5),
c2 = runif(100, 244, 255.3),
c3 = b3*3,
c4 = b4*3.5,
c5 = b5*4.9)
new.price.data <- tibble(b1 = runif(100, 78, 90),
b2 = runif(100, 67, 99),
b3 = runif(100, 29.5, 37),
b4 = runif(100, 170, 211.6),
b5 = runif(100, 43.6, 66.1),
c1 = runif(100, 355, 389.5),
c2 = runif(100, 244, 255.3),
c3 = b3*3,
c4 = b4*3.5,
c5 = b5*4.9)
new.price.data
mvw_cpi(data = new.price.data)
mvw_inflation(data = new.price.data, index = 'fisher')
mvw_cpi(data =empirical_Data1)
mvw_inflation(data = empirical_Data1, index = 'fisher')
mvw_cpi(data =empirical_Data2)
mvw_inflation(data = empirical_Data2, index = 'fisher')
?use_git
library(gert)
gert::git_status()
git_add()
?git_add()
git_add(".")
git_commit()
git_commit(message = 'another modification')
git_log()
git_ls()
use_github_action()
c(
person("John Coker", "AYIMAH", , "jayimah@htu.edu.gh", role = c("aut", "cre"),
comment = c(ORCID = "0000-0003-3619-8226")),
person("George Kyei", "AGYEN", , "gkagyen@live.com", role = "aut"),
person("Paul A.", "AGBODZA", , "pagbodza@gmail.com", role = "ctb",
comment = c(ORCID = "0000-0003-0069-5298"))
)
usethis::use_tidy_description()
library(devtools)
document()
build_readme()
check()
library(gert)
git_commit(message = 'update description and readme')
git_add(".")
git_commit(message = 'update description and readme')
build(binary = T)
install()
install(".")
?install
library(mvWeightedCPI)
install()
install.packages('rlang')
install.packages('glue')
library(devtools)
load_all()
library(dplyr)
library(janitor)
library(readr)
expenditure_Data <- read_csv("C:/Users/gkagy/OneDrive/Desktop/Gh R Package/Datasets for Package/ExpenditureData.csv")
load_all()
#split price_data into current and base year prices
p <- ncol(empirical_Data1)/2
base_prices <- empirical_Data1 |> dplyr::select(1:all_of(p))
current_prices<- empirical_Data1 |> dplyr::select(p+1 :p)
#extract expenditure prices from expenditure_data
expenditure <- expenditure_Data |> dplyr::select(2)
#create a relative price_data from the current and base price data obtained from price_data
relative_prices<-current_prices/base_prices
#Calculate Laspeyres' index from relative and expenditure prices datasets
mwCPILasp<-apply(relative_prices, 1, weighted.mean, expenditure_Data)
?weighted.mean()
expenditure
relative_prices
PCF_base <- psych::principal(base_prices, nfactors = 5, rotate = 'varimax')
PCF_base$communality
str(PCF_base$communality)
expenditure_Data
?pivot_wider
library(dplyr)
help(pivot_longer)
?pivot
library(tidyverse)
?pivot_wider()
pivot_wider(expenditure_Data, names_from = Item, values_from = Expenditure)
#Calculate Laspeyres' index from relative and expenditure prices datasets
mwCPILasp<-apply(relative_prices, 1, weighted.mean, expenditure)
#extract expenditure prices from expenditure_data and
#transform to have same columns as relative prices
expenditure <- expenditure_Data |>
dplyr::select(2)
#Calculate Laspeyres' index from relative and expenditure prices datasets
mwCPILasp<-apply(relative_prices, 1, weighted.mean, expenditure)
expenditure
as.vector(expenditure)
class(as.vector(expenditure))
expenditure$Expenditure
expenditure_Data[,2]
expenditure[expenditure_Data[,2]]
expenditure[expenditure_Data[,2],]
expenditure |> select(1)
expenditure |> pivot_wider()
expenditure |> pivot_wider(names_from = 1)
expenditure_Data[[2]]
#extract expenditure prices from expenditure_data and
#transform to have same columns as relative prices
expenditure <- expenditure_Data[[2]]
#Calculate Laspeyres' index from relative and expenditure prices datasets
mwCPILasp<-apply(relative_prices, 1, weighted.mean, expenditure)
mwCPILasp
#Determine Consumer Price Index from Laspeyres' index
NationalCPI<-mean(mwCPILasp)
NationalCPI
document()
load_all()
help("eb_cpi")
help("mvw_cpi")
document()
eb_cpi(empirical_Data1, expenditure_Data)
mwCPILasp
structure(NationalCPI, 'MwCPILasp')
structure(NationalCPI, names = ('MwCPILasp'))
load_all()
eb_cpi(empirical_Data1, expenditure_Data)
use_r('eb_inflation')
use_data(expenditure_Data)
use_r('expenditure_Data')
expenditure_Data
document()
load_all()
?expenditure_Data
?empirical_Data1
library(mvWeightedCPI)
document
document()
eb_cpi(empirical_Data1, expenditure_Data)
eb_cpi(empirical_Data1, expenditure_Data)*100
b <- eb_cpi(empirical_Data1, expenditure_Data)
as.numeric(b*100)
as.numeric(b*100)-100
464-100
as.numeric((b*100)-100)
as.numeric(b*100-100)
rep(runif(20))
rep(runif(20), 3)
price_data <- data.frame(a1 = runif(15, 13, 17.8)
a2 = runif(15, 11, 15.99),
price_data <- data.frame(a1 = runif(15, 13, 17.8),
a2 = runif(15, 11, 15.99),
a3 = runif(15, 23, 28),
a4 = runif(15, 8.8, 16.5),
c1 = 3*a1,
c2 = 2.7*a2,
c3 = 3.6*a3,
c4 = 6*a4 )
price_data <- data.frame(a1 = runif(15, 13, 17.8),
a2 = runif(15, 11, 15.99),
a3 = runif(15, 23, 28),
a4 = runif(15, 8.8, 16.5),
c1 = a1*3,
c2 = a2*2.7,
c3 = a3*3.6,
c4 = a4*6 )
price_data <- tidyr::tibble(a1 = runif(15, 13, 17.8),
a2 = runif(15, 11, 15.99),
a3 = runif(15, 23, 28),
a4 = runif(15, 8.8, 16.5),
c1 = a1*3,
c2 = a2*2.7,
c3 = a3*3.6,
c4 = a4*6 )
price_data
price_data[[1:4]]
price_data[,1:4]
?lapply(list, function)
?lapply
?vapply
?apply
lapply(price_data[,1:4], mean)
sapply(price_data[,1:4], mean)
b<-sapply(price_data[,1:4], mean)
as.data.frame(b)
staked(b)
stack(b)
?stack
document()
load_all()
eb_inflation(empirical_Data1, expenditure_Data)
load_all()
eb_inflation(empirical_Data1, expenditure_Data)
library(devtools)
library(gert)
document()
use_tidy_description()
use_tidy_description()
document()
library(devtools)
library(testthat)
use_test('eb_inflation')
use_test('eb_cpi')
load_all()
eb_inflation(empirical_Data1, expenditure_Data)
?expect_equal
eb_inflation(price_data = c(), expenditure_data = c())
c()
load_all()
load_all()
eb_inflation(c(),c())
eb_inflation(empirical_Data1, expenditure_Data)
eb_cpi(price_data = price_data, expenditure_data = exp_data)
eb_cpi(empirical_Data1, expenditure_data = )
eb_cpi(empirical_Data1, expenditure_Data)
a <- eb_cpi(empirical_Data1, expenditure_Data)
names(a)
expect_equal(a, 4.647541)
expect_equal(a, 4.6475410)
expect_equal(a, 4.6475406)
expect_equal(a, c(mwCPI_Lasp = 4.6475406))
expect_equal(a, (mwCPI_Lasp = 4.6475406))
expect_equal(a, c(mwCPI_Lasp = 4.6475406))
class(a)
type(a)
names(a)%in%'mwCPI_Lasp'
mypriceData <- data.frame(x1=runif(50, 9.9, 13.7),
x2=rnorm(50, 10.9, 2.1),
x3=runif(50, 12.2, 15),
x4=runif(50,19.4, 24),
y1=runif(50, 26, 30),
y2=runif(50, 31, 38.9),
y3=runif(50, 28.2, 33.1),
y4=runif(50, 51.8, 60)
)
mypriceData
mypriceData[,1:4]
apply(mypriceData[,1:4], 2, mean)
library(janitor)
b <- apply(mypriceData[,1:4], 2, mean)
adorn_crosstab(b)
tabyl(b)
t(b)
df <- data.frame(
ID = c(1, 2, 3),
Name = c("John", "Alice", "Bob"),
Score1 = c(80, 75, 90),
Score2 = c(85, 82, 88)
)
df
t(df)
df <- data.frame(
ID = c(1),
Name = c("John"),
Score1 = c(80),
Score2 = c(85)
)
t(df)
names(a)
names(b)
values(b)
value(b)
unname(b)
cbind(name = names(b), value = unname(b))
n_vec <- apply(mypriceData[, 1:4], 2, mean)
myexpData <- data.frame(cbind(item = names(n_vec), price = unname(n_vec)))
eb_cpi(price_data = mypriceData, expenditure_data = myexpData)
n_vec <- apply(mypriceData[, 1:4], 2, mean)
myexpData <- data.frame(cbind(item = names(n_vec), price = unname(n_vec)))
n_vec
myexpData
n_vec <- apply(mypriceData[, 1:4], 2, mean)
myexpData <- data.frame(cbind(item = names(n_vec), price = as.numeric(unname(n_vec))))
n_vec
myexpData
n_vec <- apply(mypriceData[, 1:4], 2, mean)
myexpData <- data.frame(cbind(item = names(n_vec), as.numeric(price = (unname(n_vec)))))
as.numeric(unname(b))
class(b)
class(unname(b))
cbind.data.frame(item = names(n_vec), price = (unname(n_vec)))
c <- cbind.data.frame(item = names(n_vec), price = (unname(n_vec)))
c
n_vec <- apply(mypriceData[, 1:4], 2, mean)
myexpData <- cbind.data.frame(item = names(n_vec), price = (unname(n_vec)))
n_vec
myexpData
n_vec <- apply(mypriceData[, 1:4], 2, mean)
myexpData <- cbind.data.frame(item = names(n_vec), price = (unname(n_vec)))
eb_cpi(price_data = mypriceData, expenditure_data = myexpData)
eb_inflation(mypriceData, myexpData)
load_all()
library(emWeightedCPI)
library(devtools)
library(testthat)
build_readme()
check()
use_testthat()
document()
check()
empirical_Data1
help("empirical_Data1")
seq(4600, 1000, -26)
1012-26
seq(4300, 1000, -26)
seq(4300, 900, -26)
seq(4300, 998, -26)
Varies_L <- seq(4300, 998, -26)
length(Varies_L)
library(devtools)
document()
load_all()
empirical_Data2
help("empirical_Data1")
document()
load_all()
help("empirical_Data1")
help("empirical_Data2")
check()
Varies_L
4300-100
seq(4300, 1000, -30)
Varies_L <- seq(4300, 1000, -30)
Varies_L[1:26]
spanA <- Varies_L[1:26]
spanA <- Varies_L[27:52]
spanB <- Varies_L[27:52]
spanA <- Varies_L[1:26]
spanC <- Varies_L[53:78]
spanD <- Varies_L[79:104]
spanE <- Varies_L[105:]
length(Varies_L)
spanE <- Varies_L[105:length(Varies_L)]
Varies_L <- seq(4400, 1000, -30)
spanA <- Varies_L[1:26]
spanB <- Varies_L[27:52]
spanC <- Varies_L[53:78]
spanD <- Varies_L[79:104]
spanE <- Varies_L[105:length(Varies_L)]
length(Varies_L)
Varies_L <- seq(4400, 1000, -24)
length(Varies_L)
Varies_L <- seq(4400, 800, -24)
Varies_L
length(Varies_L)
4400:800
spanA <- Varies_L[1:26]
spanB <- Varies_L[27:52]
spanC <- Varies_L[53:78]
spanD <- Varies_L[79:104]
spanE <- Varies_L[105:130]
spanF <- Varies_L[131:156]
spanF
spanB <- Varies_L[26:51]
spanC <- Varies_L[51:76]
spanD <- Varies_L[76:101]
spanE <- Varies_L[101:126]
spanF <- Varies_L[126:151]
length(Varies_L)
spanF
library(devtools)
use_mit_license()
