#use_git_config(user.name = "gkagyen", user.email = "gkagyen@live.com")
# check by running a git situation-report:
#   - your user.name and user.email should appear in global Git config
git_sitrep()
# Create package ----------------------------------------------------------
library(devtools)
#use_git_config(user.name = "gkagyen", user.email = "gkagyen@live.com")
# check by running a git situation-report:
#   - your user.name and user.email should appear in global Git config
git_sitrep()
use_git()  # create a git repository
# Create package ----------------------------------------------------------
library(devtools)
load_all() # make package function available for use
help("mw_indices")
help("mw_indices")
help("mw_indices")
devtools::load_all(".")
devtools::load_all(".")
library(devtools)
devtools::load_all(".")
help("setNames")
?read_csv()
?read_csv
library(readr)
?read_csv
dat1 <- read_csv('C:/Users/gkagy/OneDrive/Desktop/Gh R Package/Empirical Data_1',
col_names = F, show_col_types = F)
dat1 <- read_csv('C:/Users/gkagy/OneDrive/Desktop/Gh R Package/Empirical Data_1.csv',
col_names = F, show_col_types = F)
dat1
library(dplyr)
?slice
dat1 |> slic(-1:2)
dat1 |> slice(-1:2)
dat1 |> slice(-(1:2))
library(janitor)
dat1 |> slice(-(1:2)) |> row_to_names(row_number =1)
dat <- read_csv('C:/Users/gkagy/OneDrive/Desktop/Gh R Package/Empirical Data_1.csv',
col_names = F, show_col_types = F) |>
slic(-(1:2)) |>
row_to_names(row_number = 1)
dat <- read_csv('C:/Users/gkagy/OneDrive/Desktop/Gh R Package/Empirical Data_1.csv',
col_names = F, show_col_types = F) |>
slice(-(1:2)) |>
row_to_names(row_number = 1)
dat
ncol(dat)
nrow(dat)
dim(dat)
glimpse(dat)
dat <- read_csv('C:/Users/gkagy/OneDrive/Desktop/Gh R Package/Empirical Data_1.csv',
col_names = F, show_col_types = F, col_types = 'double') |>
slice(-(1:2)) |>
row_to_names(row_number = 1)
dat <- read_csv('C:/Users/gkagy/OneDrive/Desktop/Gh R Package/Empirical Data_1.csv',
col_names = F, show_col_types = F, col_types = 'numeric') |>
slice(-(1:2)) |>
row_to_names(row_number = 1)
dat
dat <- read_csv('C:/Users/gkagy/OneDrive/Desktop/Gh R Package/Empirical Data_1.csv',
col_names = F, show_col_types = F) |>
slice(-(1:2)) |>
row_to_names(row_number = 1) |>
mutate_if(is.character, as.double)
dat
cols_condense()
?cols_condense()
cols_condense(dat)
spec(x)
spec(dat)
dat
dat <- read_csv('C:/Users/gkagy/OneDrive/Desktop/Gh R Package/Empirical Data_1.csv',
col_names = F, show_col_types = F, col_types = cols(.default = col_double())) |>
slice(-(1:2)) |>
row_to_names(row_number = 1)
dat
col_names = F, show_col_types = F, col_types = list(.default=col_double())
dat <- read_csv('C:/Users/gkagy/OneDrive/Desktop/Gh R Package/Empirical Data_1.csv',
col_names = F, show_col_types = F, col_types = list(.default=col_double()))
dat
getwd()
# Create package ----------------------------------------------------------
library(devtools)
#use_git_config(user.name = "gkagyen", user.email = "gkagyen@live.com")
# check by running a git situation-report:
#   - your user.name and user.email should appear in global Git config
git_sitrep()
use_data_raw()
source("C:/Users/gkagy/OneDrive/Desktop/Gh R Package/mvWeightedCPI/data-raw/DATASET.R")
setwd("C:/Users/gkagy/OneDrive/Desktop/Gh R Package/mvWeightedCPI/data-raw")
setwd("C:/Users/gkagy/OneDrive/Desktop/Gh R Package/mvWeightedCPI")
empirical_Data1 <- read_csv('/data-raw/Empirical Data_1.csv',
col_names = F, show_col_types = F) |>
slice(-(1:2)) |>
row_to_names(row_number = 1) |>
mutate_if(is.character, as.double)
getwd()
setwd('/data-raw')
setwd('/data')
setwd(':/data')
setwd('/data')
setwd('data')
getwd()
setwd("C:/Users/gkagy/OneDrive/Desktop/Gh R Package/mvWeightedCPI")
setwd('data-raw')
source("C:/Users/gkagy/OneDrive/Desktop/Gh R Package/mvWeightedCPI/data-raw/DATASET.R")
setwd("C:/Users/gkagy/OneDrive/Desktop/Gh R Package/mvWeightedCPI")
source("C:/Users/gkagy/OneDrive/Desktop/Gh R Package/mvWeightedCPI/data-raw/DATASET.R")
empirical_Data1 <- read_csv('data-raw/Empirical Data_1.csv',
col_names = F, show_col_types = F) |>
slice(-(1:2)) |>
row_to_names(row_number = 1) |>
mutate_if(is.character, as.double)
empirical_Data2 <- read_csv('data-raw/Empirical Data_2.csv',
col_names = F, show_col_types = F) |>
slice(-(1:2)) |>
row_to_names(row_number = 1) |>
mutate_if(is.character, as.double)
source("C:/Users/gkagy/OneDrive/Desktop/Gh R Package/mvWeightedCPI/data-raw/DATASET.R")
check()
use_data(empirical_Data1)
use_data(empirical_Data1, overwrite = T)
use_data(empirical_Data2, overwrite = T)
use_this::git_clean()
library(devtools)
use_this::git_clean()
usethis::git_clean()
git
git()
use_git_config()
use_readme_rmd()
load()
load_all()
library(mvWeightedCPI)
#calling the function without any arguments
mvw_cpi()
# choose which dataset to use for calculating weights
mvw_cpi(data = 'empirical_Data2')
#output might change when fuction is called more than once without specifying data
#firs call
mvw_cpi()
#second call
mvw_cpi()
#third call
mvw_cpi()
inflation()
inflation(weights = 'fisher')
library(mvWeightedCPI)
library(mvWeightedCPI)
library(mvWeightedCPI)
mvw_cpi()
mvw_cpi(data = 'empirical_Data1')
empirical_Data1
empirical_Data2
help(inflation)
help("mvw_cpi")
?empirical_Data2
inflation(weights = 'paashe')
# Create package ----------------------------------------------------------
library(devtools)
library(dplyr)
library(janitor)
library(readr)
load_all()
check()
library(devtools)
check()
runif(50, 5, 13.7)
mydat <- data.frame(x1=runif(50, 9.9, 13.7),
x2=rnorm(50, 10.9, 2.1),
x3=runif(50, 12.2, 15),
x4=runif(50,19.4, 24),
y1=runif(50, 26, 30),
y2=runif(50, 31, 38.9),
y3=runif(28.2, 33.1),
y4=runif(51.8, 60)
)
mydat <- data.frame(x1=runif(50, 9.9, 13.7),
x2=rnorm(50, 10.9, 2.1),
x3=runif(50, 12.2, 15),
x4=runif(50,19.4, 24),
y1=runif(50, 26, 30),
y2=runif(50, 31, 38.9),
y3=runif(50, 28.2, 33.1),
y4=runif(50, 51.8, 60)
)
mydat
library(mvWeightedCPI)
mvw_cpi(my_dat)
mvw_cpi(mydat)
inflation(weights = 'fisher')
inflation(weights = 'fisher')
inflation(weights = 'fisher')
detach("package:mvWeightedCPI", unload = TRUE)
library(devtools)
load_all()
inflation(weights = 'fisher', data = mydat)
browseVignettes('readr')
vignette(mass)
vignette('mass')
vignette('dplyr')
vignette(car)
vignette('car')
library(car)
vignette('car')
# Install and load the deSolve package
library(deSolve)
# Define the function representing the ODE system
lotka_volterra <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- alpha * X - beta * X * Y
dY <- delta * X * Y - gamma * Y
return(list(c(dX, dY)))
})
}
# Set initial conditions and parameters
initial_state <- c(X = 10, Y = 5)
parameters <- c(alpha = 0.1, beta = 0.02, delta = 0.3, gamma = 0.01)
# Define time points
times <- seq(0, 200, by = 0.1)
# Solve the ODE system
solution <- ode(y = initial_state, times = times, func = lotka_volterra, parms = parameters)
solution
# Plot the results
plot(solution, xlab = "Time", ylab = "Population", main = "Lotka-Volterra Model", col = c("blue", "red"), lwd = 2)
vignette('ffp3')
vignette('fpp3')
vignette('shiny')
library(shiny)
vignette('shiny')
check()
document()
check()
load_all()
install()
uninstall('mvWeightedCPI')
uninstall(pkg = 'mvWeightedCPI')
remove.packages(mvWeightedCPI)
detach("package:mvWeightedCPI", unload = TRUE)
library(mvWeightedCPI)
detach("package:mvWeightedCPI", unload = TRUE)
remove.packages("mvWeightedCPI")
install()
update.packages('rlang')
update.packages('glue')
install()
document()
library(devtools)
library(mvWeightedCPI)
library(mvWeightedCPI)
library(devtools)
document()
use_r('mvw_inflation')
document()
document()
load_all()
mvw_cpi(data = empirical_Data1)
mvw_cpi(empirical_Data1)
mvw_inflation('fisher', empirical_Data2)
mvw_inflation('drobish', empirical_Data2)
mvw_inflation('paashe', empirical_Data2)
mvw_inflation('paashe', empirical_Data1)
mvw_inflation('fisher', empirical_Data1)
mvw_inflation('drobish', empirical_Data1)
mvw_inflation('laspeyres', empirical_Data1)
load_all()
mvw_inflation('fisher', empirical_Data2)
mvw_inflation('paashe', empirical_Data2)
empirical_Data2
mydat <- data.frame(x1=runif(50, 9.9, 13.7),
x2=rnorm(50, 10.9, 2.1),
x3=runif(50, 12.2, 15),
x4=runif(50,19.4, 24),
y1=runif(50, 26, 30),
y2=runif(50, 31, 38.9),
y3=runif(50, 28.2, 33.1),
y4=runif(50, 51.8, 60)
)
mydat
mvw_inflation(weights = 'fisher', data = mydat)
mvw_inflation(weights = 'drobish', data = mydat)
mvw_inflation(weights = 'paashe', data = mydat)
mvw_inflation(weights = 'laspeyres', data = mydat)
load_all()
mvw_inflation(weights = 'fisher', data = mydat)
load_all()
mvw_inflation(weights = 'drobish', data = mydat)
mvw_inflation(index = 'drobish', data = mydat)
mvw_inflation(index = "paashe", data = mydat)
load_all()
mvw_inflation(index = "paashe", data = mydat)
load_all()
mvw_inflation(index = "paashe", data = mydat)
mvw_inflation(index = "paashe", data = mydat)
mvw_inflation(index = "fisher", data = mydat)
mvw_inflation(index = "paashe", data = mydat)
mvw_inflation(index = "fisher", data = mydat)
load_all()
mvw_inflation(index = "paashe", data = mydat)
mvw_inflation(index = "fisher", data = mydat)
document()
help("mvw_inflation")
document()
load_all
load_all()
help("mvw_inflation")
document()
load_all()
help("mvw_inflation")
document()
build()
install.packages
?install.packages
install.packages(type='source', repos = NULL, file.choose())
library(mvWeightedCPI)
detach("package:mvWeightedCPI", unload = TRUE)
unload("mvWeightedCPI")
library(mvWeightedCPI)
help("mvw_inflation")
document()
install()
remove.packages('mvWeihtedCPI')
remove.packages('mvWeightedCPI')
library(mvWeightedCPI)
help(mvw_cpi)
?mvw_inflation()
document()
remove.packages("mvWeightedCPI")
library(mvWeightedCPI)
citation("mvWeightedCPI")
document
document()
remove.packages("mvWeightedCPI")
document
document()
library(mvWeightedCPI)
citation("mvWeightedCPI")
runif(50, 12, 15)
library(mvWeightedCPI)
#create an arbitrary price data
myData <- data.frame(x1=runif(50, 9.9, 13.7),
x2=rnorm(50, 10.9, 2.1),
x3=runif(50, 12.2, 15),
x4=runif(50,19.4, 24),
y1=runif(50, 26, 30),
y2=runif(50, 31, 38.9),
y3=runif(28.2, 33.1),
y4=runif(51.8, 60)
)
library(mvWeightedCPI)
#create an arbitrary price data
myData <- data.frame(x1=runif(50, 9.9, 13.7),
x2=rnorm(50, 10.9, 2.1),
x3=runif(50, 12.2, 15),
x4=runif(50,19.4, 24),
y1=runif(50, 26, 30),
y2=runif(50, 31, 38.9),
y3=runif(28.2, 33.1),
y4=runif(51.8, 60)
)
library(mvWeightedCPI)
#create an arbitrary price data
myData <- data.frame(x1=runif(50, 9.9, 13.7),
x2=rnorm(50, 10.9, 2.1),
x3=runif(50, 12.2, 15),
x4=runif(50,19.4, 24),
y1=runif(50, 26, 30),
y2=runif(50, 31, 38.9),
y3=runif(50, 28.2, 33.1),
y4=runif(50, 51.8, 60)
)
#call the function with the created data
mvw_cpi(data = myData)
# view empirical_Data1 provided in package
empirical_Data1
#calculating inflation using Fishers index
mvw_inflation(index = 'fisher', data = myData)
#calculating inflation using Fishers index
mvw_inflation(index = 'fisher', data = myData)
# Fishers' is the ideal index for calculating inflation.
# The rest of the indices generates a warning after calculating inflation
mvw_inflation(index = 'drobish', data = myData)
mvw_inflation(index = 'drobish', data = myData)
#calculating inflation using Fishers index
mvw_inflation(index = 'fisher', data = myData)
# view empirical_Data1 provided in package
empirical_Data1
# calculate indices using empirical_Data1
mvw_cpi(data = empirical_Data1)
library(devtools)
build_readme()
library(devtools)
load_all
load_all()
# view empirical_Data1 provided in package
head(empirical_Data1)
# calculate indices and inflation using empirical_Data1
mvw_cpi(data = empirical_Data1)
mvw_inflation(index='fisher', data = empirical_Data1)
glimpse(empirical_Data1)
View(empirical_Data1)
str(empirical_Data1)
glimpse(empirical_Data1)
library(dplyr)
glimpse(empirical_Data1)
dim(empirical_Data1)
# inspect empirical_Data2 provided in package
head(empirical_Data2)
dim(empirical_Data2)
# calculate indices and inflation using empirical_Data2
mvw_cpi(data = empirical_Data2)
mvw_inflation(index='fisher', data = empirical_Data2)
build_readme()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='gkagyen', token='A634D80DC56DB773604D2357138C45DA', secret='2Cox8626hEyjntceFKtpfW1WlJJ3QThMqPC79k60')
library(shiny); runApp('E:/Shiny/Shiny/myapp.R')
library(rsconnect)
deployApp('mapp.R')
deployApp('myapp.R')
setwd("E:/Shiny/Shiny")
deployApp('myapp.R')
runApp()
runApp('Summarytables')
load_all()
library(devtools)
load_all()
new.price.data <- tibble(b1 = runif(100, 78, 90),
b2 = runif(100, 67, 99),
b3 = runif(100, 29.5, 37),
b4 = runif(100, 170, 211.6),
b5 = runif(10, 43.6, 66.1),
c1 = runif(100, 355, 389.5),
c2 = runif(100, 244, 255.3),
c3 = b3*3,
c4 = b4*3.5,
c5 = b5*4.9)
library(dplyr)
new.price.data <- tibble(b1 = runif(100, 78, 90),
b2 = runif(100, 67, 99),
b3 = runif(100, 29.5, 37),
b4 = runif(100, 170, 211.6),
b5 = runif(10, 43.6, 66.1),
c1 = runif(100, 355, 389.5),
c2 = runif(100, 244, 255.3),
c3 = b3*3,
c4 = b4*3.5,
c5 = b5*4.9)
new.price.data <- tibble(b1 = runif(100, 78, 90),
b2 = runif(100, 67, 99),
b3 = runif(100, 29.5, 37),
b4 = runif(100, 170, 211.6),
b5 = runif(100, 43.6, 66.1),
c1 = runif(100, 355, 389.5),
c2 = runif(100, 244, 255.3),
c3 = b3*3,
c4 = b4*3.5,
c5 = b5*4.9)
new.price.data
mvw_cpi(data = new.price.data)
mvw_inflation(data = new.price.data, index = 'fisher')
mvw_cpi(data =empirical_Data1)
mvw_inflation(data = empirical_Data1, index = 'fisher')
mvw_cpi(data =empirical_Data2)
mvw_inflation(data = empirical_Data2, index = 'fisher')
?use_git
library(gert)
gert::git_status()
git_add()
?git_add()
git_add(".")
git_commit()
git_commit(message = 'another modification')
git_log()
git_ls()
use_github_action()
